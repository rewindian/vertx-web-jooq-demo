/*
 * This file is generated by jOOQ.
 */
package com.xxx.web.jooq.tables;


import com.xxx.web.jooq.Demo;
import com.xxx.web.jooq.Indexes;
import com.xxx.web.jooq.Keys;
import com.xxx.web.jooq.tables.records.TOrderRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrder extends TableImpl<TOrderRecord> {

    private static final long serialVersionUID = -144254363;

    /**
     * The reference instance of <code>demo.t_order</code>
     */
    public static final TOrder T_ORDER = new TOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderRecord> getRecordType() {
        return TOrderRecord.class;
    }

    /**
     * The column <code>demo.t_order.id</code>. 主键
     */
    public final TableField<TOrderRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>demo.t_order.name</code>. 名称
     */
    public final TableField<TOrderRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "名称");

    /**
     * The column <code>demo.t_order.create_time</code>. 创建时间
     */
    public final TableField<TOrderRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "创建时间");

    /**
     * The column <code>demo.t_order.user_name</code>. 订单所属用户名
     */
    public final TableField<TOrderRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "订单所属用户名");

    /**
     * Create a <code>demo.t_order</code> table reference
     */
    public TOrder() {
        this(DSL.name("t_order"), null);
    }

    /**
     * Create an aliased <code>demo.t_order</code> table reference
     */
    public TOrder(String alias) {
        this(DSL.name(alias), T_ORDER);
    }

    /**
     * Create an aliased <code>demo.t_order</code> table reference
     */
    public TOrder(Name alias) {
        this(alias, T_ORDER);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TOrder(Table<O> child, ForeignKey<O, TOrderRecord> key) {
        super(child, key, T_ORDER);
    }

    @Override
    public Schema getSchema() {
        return Demo.DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_USER_NAME_INDEX);
    }

    @Override
    public UniqueKey<TOrderRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderRecord>>asList(Keys.KEY_T_ORDER_PRIMARY);
    }

    @Override
    public TOrder as(String alias) {
        return new TOrder(DSL.name(alias), this);
    }

    @Override
    public TOrder as(Name alias) {
        return new TOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(String name) {
        return new TOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(Name name) {
        return new TOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
