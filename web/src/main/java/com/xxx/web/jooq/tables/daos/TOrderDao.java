/*
 * This file is generated by jOOQ.
 */
package com.xxx.web.jooq.tables.daos;


import com.xxx.web.jooq.tables.TOrder;
import com.xxx.web.jooq.tables.records.TOrderRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderDao extends AbstractVertxDAO<TOrderRecord, com.xxx.web.jooq.tables.pojos.TOrder, Long, Future<List<com.xxx.web.jooq.tables.pojos.TOrder>>, Future<com.xxx.web.jooq.tables.pojos.TOrder>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TOrderRecord,com.xxx.web.jooq.tables.pojos.TOrder,Long> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public TOrderDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(TOrder.T_ORDER, com.xxx.web.jooq.tables.pojos.TOrder.class, new JDBCClassicQueryExecutor<TOrderRecord,com.xxx.web.jooq.tables.pojos.TOrder,Long>(configuration,com.xxx.web.jooq.tables.pojos.TOrder.class,vertx));
    }

    @Override
    protected Long getId(com.xxx.web.jooq.tables.pojos.TOrder object) {
        return object.getId();
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByName(Collection<String> values) {
        return findManyByCondition(TOrder.T_ORDER.NAME.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(TOrder.T_ORDER.NAME.in(values),limit);
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByCreateTime(Collection<LocalDateTime> values) {
        return findManyByCondition(TOrder.T_ORDER.CREATE_TIME.in(values));
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByCreateTime(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(TOrder.T_ORDER.CREATE_TIME.in(values),limit);
    }

    /**
     * Find records that have <code>user_name IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByUserName(Collection<String> values) {
        return findManyByCondition(TOrder.T_ORDER.USER_NAME.in(values));
    }

    /**
     * Find records that have <code>user_name IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrder>> findManyByUserName(Collection<String> values, int limit) {
        return findManyByCondition(TOrder.T_ORDER.USER_NAME.in(values),limit);
    }

    @Override
    public JDBCClassicQueryExecutor<TOrderRecord,com.xxx.web.jooq.tables.pojos.TOrder,Long> queryExecutor(){
        return (JDBCClassicQueryExecutor<TOrderRecord,com.xxx.web.jooq.tables.pojos.TOrder,Long>) super.queryExecutor();
    }
}
