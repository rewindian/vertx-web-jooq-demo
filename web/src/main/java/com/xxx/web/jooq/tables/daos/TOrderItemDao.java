/*
 * This file is generated by jOOQ.
 */
package com.xxx.web.jooq.tables.daos;


import com.xxx.web.jooq.tables.TOrderItem;
import com.xxx.web.jooq.tables.records.TOrderItemRecord;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * 订单商品表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderItemDao extends AbstractVertxDAO<TOrderItemRecord, com.xxx.web.jooq.tables.pojos.TOrderItem, Long, Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>>, Future<com.xxx.web.jooq.tables.pojos.TOrderItem>, Future<Integer>, Future<Long>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<TOrderItemRecord,com.xxx.web.jooq.tables.pojos.TOrderItem,Long> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public TOrderItemDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(TOrderItem.T_ORDER_ITEM, com.xxx.web.jooq.tables.pojos.TOrderItem.class, new JDBCClassicQueryExecutor<TOrderItemRecord,com.xxx.web.jooq.tables.pojos.TOrderItem,Long>(configuration,com.xxx.web.jooq.tables.pojos.TOrderItem.class,vertx));
    }

    @Override
    protected Long getId(com.xxx.web.jooq.tables.pojos.TOrderItem object) {
        return object.getId();
    }

    /**
     * Find records that have <code>order_id IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByOrderId(Collection<Long> values) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.ORDER_ID.in(values));
    }

    /**
     * Find records that have <code>order_id IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByOrderId(Collection<Long> values, int limit) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.ORDER_ID.in(values),limit);
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByName(Collection<String> values) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.NAME.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.NAME.in(values),limit);
    }

    /**
     * Find records that have <code>order_create_time IN (values)</code> asynchronously
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByOrderCreateTime(Collection<LocalDateTime> values) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.ORDER_CREATE_TIME.in(values));
    }

    /**
     * Find records that have <code>order_create_time IN (values)</code> asynchronously limited by the given limit
     */
    public Future<List<com.xxx.web.jooq.tables.pojos.TOrderItem>> findManyByOrderCreateTime(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(TOrderItem.T_ORDER_ITEM.ORDER_CREATE_TIME.in(values),limit);
    }

    @Override
    public JDBCClassicQueryExecutor<TOrderItemRecord,com.xxx.web.jooq.tables.pojos.TOrderItem,Long> queryExecutor(){
        return (JDBCClassicQueryExecutor<TOrderItemRecord,com.xxx.web.jooq.tables.pojos.TOrderItem,Long>) super.queryExecutor();
    }
}
